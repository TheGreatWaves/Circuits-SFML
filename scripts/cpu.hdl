CHIP cpu {
	IN 
	inM[16],         // Value of M (RAM[A])
	instruction[16], // Instruction to execute
	reset,           // Execute first instruction (reset == 1), or next instruction.
	clock;

	OUT
	outM[16],     // Value to write to RAM register
	writeM,       // Write to RAM
	addressM[15], // Ram register address

	d_reg[16],    // For debugging.

	pc[15];       // Address of next instruction

	PARTS:
	///
	/// Control bits
	/// 

	// Instruction Type.
	not(in=instruction[15], out=A_instruction);
	not(in=A_instruction,   out=C_instruction);

	// Destination bits for C-Instruction.
	forward(in=instruction[5], out=dest_a);
	forward(in=instruction[4], out=dest_d);
	forward(in=instruction[3], out=dest_ram);

	// Load to A?
	// load_a = (C_instruction AND destination is A) or A_instruction
	and(a=C_instruction, b=dest_a, out=alu_out_dest_is_a);
	or(a=A_instruction, b=alu_out_dest_is_a, out=load_a);

	// Load to D?
	and(a=C_instruction, b=dest_d, out=load_d);

	///
	/// Logical
	///

	// Mux to A.
	// Takes in:
	//  - Alu output
	//  - Instruction
	// Selector:
	//  - C-Dest being A (take Alu output).
	mux_16(
	   a   = instruction, // Take instruction by default.
	   b   = outM,     // Only taken if C-Instr destination = A.
	   sel = alu_out_dest_is_a, 
	   out = mux_to_a
	);

	// Mux to ALU.
	// Takes in:
	//  - A register value
	//  - inM
	// Selector:
	//  - Take A register. (take mux input)
	mux_16(
		a[0]  = addressM[0], 
		a[1]  = addressM[1], 
		a[2]  = addressM[2], 
		a[3]  = addressM[3], 
		a[4]  = addressM[4], 
		a[5]  = addressM[5], 
		a[6]  = addressM[6], 
		a[7]  = addressM[7], 
		a[8]  = addressM[8], 
		a[9]  = addressM[9], 
		a[10] = addressM[10], 
		a[11] = addressM[11], 
		a[12] = addressM[12], 
		a[13] = addressM[13], 
		b     = inM, 
		sel   = instruction[12], 
		out   = mux_to_alu
	);

	forward(in=instruction[3], out=writeM);

	alu(x=d_reg, y=mux_to_alu,
		zx  = instruction[11],
		nx  = instruction[10],
		zy  = instruction[9],
		ny  = instruction[8],
		f   = instruction[7],
		no  = instruction[6],
		out = outM,
		zr  = zr_out,
		ng  = ng_out
	);

	//
	// Program counter.
	//
	// Aliases.
	forward(in=instruction[2], out=j1); // Cond: < 0
	forward(in=instruction[1], out=j2); // Cond: = 0
	forward(in=instruction[0], out=j3); // Cond: > 0
	not(in=ng_out, out=pos);

	// Jump conditions.
	and(a=j2, b=zr, out=jez);       // Jump if 0
	and(a=j3, b=positive, out=jgz); // Jump if 0 >
	and(a=j1, b=ng_out, out=jlz);   // Jump if < 0
	or(a=jez, b=jlz, out=jlez);     // Jump if <= 0
	or(a=jez, b=jgz, out=jgez);     // Jump if >= 0
	or(a=jlez, b=jgez, out=jump);   // Jump condition

	and(a=C_instruction, b=jump, out=load_pc); // if j(jbits,zr,ng) pc <- A 
	not(in=load_pc, out=inc_pc);               // else pc++
	
	true(in=instruction[0], out=true);
	pc(clock=clock, load=load_pc, reset=reset, inc=inc_pc,
		in[0]  = addressM[0], 
		in[1]  = addressM[1], 
		in[2]  = addressM[2], 
		in[3]  = addressM[3], 
		in[4]  = addressM[4], 
		in[5]  = addressM[5], 
		in[6]  = addressM[6], 
		in[7]  = addressM[7], 
		in[8]  = addressM[8], 
		in[9]  = addressM[9], 
		in[10] = addressM[10], 
		in[11] = addressM[11], 
		in[12] = addressM[12], 
		in[13] = addressM[13], 
		out[0]  = pc[0],
		out[1]  = pc[1],
		out[2]  = pc[2],
		out[3]  = pc[3],
		out[4]  = pc[4],
		out[5]  = pc[5],
		out[6]  = pc[6],
		out[7]  = pc[7],
		out[8]  = pc[8],
		out[9]  = pc[9],
		out[10] = pc[10],
		out[11] = pc[11],
		out[12] = pc[12],
		out[13] = pc[13],
		out[14] = pc[14]
	);
	

	///
	/// Registers
	///

	forward_16(in=mux_to_a, out=mux_to_a_1);
	forward_16(in=mux_to_a_1, out=mux_to_a_2);
	forward_16(in=mux_to_a_2, out=mux_to_a_3);

	// A Register.
	register(
		clock = clock, 
		in    = mux_to_a_3, 
		out[0]   = addressM[0],
		out[1]   = addressM[1],
		out[2]   = addressM[2],
		out[3]   = addressM[3],
		out[4]   = addressM[4],
		out[5]   = addressM[5],
		out[6]   = addressM[6],
		out[7]   = addressM[7],
		out[8]   = addressM[8],
		out[9]   = addressM[9],
		out[10]   = addressM[10],
		out[11]   = addressM[11],
		out[12]   = addressM[12],
		out[13]   = addressM[13],
		load  = load_a
	);

	// D Register.
	register(
		clock = clock, 
		in    = outM, 
		out   = d_reg,
		load  = load_d
	);
}
