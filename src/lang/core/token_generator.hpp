/**
 * MIT License
 *
 * Copyright (c) 2023 Ochawin A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file should not be touched. This is only used to generate a token class
 * given a token file. A token type can be easily generated by defining a .def file
 * with proper macros. Information can be found in "lang/core/token_base.hpp"
 */

#ifndef TOKEN_DESCRIPTOR_FILE
#error "TOKEN_DESCRIPTOR_FILE not specified."
#else

#ifndef TOKEN_CLASS_NAME
#error "TOKEN_CLASS_NAME not specified."
#endif

#include <cstdint>

#include "enum_base.hpp"
#include "token_base.hpp"

/**
 * Declare new raw enum class and name values.
 */
DECLARE_RAW_ENUM_CLASS(TOKEN_CLASS_NAME, uint8_t) {
 #define TOKEN(name) RAW_ENUM_ENUMERATOR(name)
 #include TOKEN_DESCRIPTOR_FILE
};

/**
 * Subclass from EnumBase.
 */
class TOKEN_CLASS_NAME : public TOKEN_BASE(TOKEN_CLASS_NAME)
{
public:
/**
 * Generate constant declarations.
 */
#define TOKEN(name) ENUM_CONSTANT_DECLARATION_ENUMERATOR(name)
#include TOKEN_DESCRIPTOR_FILE
};

/**
 * Generate constant definitions.
 */
#define TOKEN(name) ENUM_CONSTANT_DEFINITION_ENUMERATOR(TOKEN_CLASS_NAME, name)
#include TOKEN_DESCRIPTOR_FILE

/**
 * Generate enum names.
 */
DEFINE_ENUM_CLASS_NAMES(TOKEN_CLASS_NAME) = {
#define TOKEN(name) ENUM_NAME_ENUMERATOR(name)
 #include TOKEN_DESCRIPTOR_FILE
};

/*================================*/
/*                                */
/*     Properties generation.     */
/*                                */
/*================================*/

// Marking keywords.
ALL_KEYWORD_TOKENS_DEFINITION(TOKEN_CLASS_NAME) = {
 #define KEYWORD_TOKEN(name, symbol) TOKEN_ENUM_VALUE(TOKEN_CLASS_NAME, name)
 #include TOKEN_DESCRIPTOR_FILE
};

// Collect all tokens.
ALL_TOKENS_DEFINITION(TOKEN_CLASS_NAME) = {
 #define TOKEN(name) TOKEN_ENUM_VALUE(TOKEN_CLASS_NAME, name)
 #include TOKEN_DESCRIPTOR_FILE
};

// Defining keywords.
KEYWORD_MARKER_DEFINITION(TOKEN_CLASS_NAME) = {
 #define TOKEN(name) false,
 #define KEYWORD_TOKEN(name, keyword) true,
 #include TOKEN_DESCRIPTOR_FILE
};

// Defining symbols.
SYMBOL_MARKER_DEFINITION(TOKEN_CLASS_NAME) = {
 #define TOKEN(name) false,
 #define SYMBOL_TOKEN(name, symbol) true,
 #include TOKEN_DESCRIPTOR_FILE
};

// List of symbols.
SYMBOL_STRING_DEFINITION(TOKEN_CLASS_NAME) = {
 #define TOKEN(name) "",
 #define SYMBOL_TOKEN(name, symbol) symbol,
 #define KEYWORD_TOKEN(name, symbol) symbol,
 #include TOKEN_DESCRIPTOR_FILE
};

#undef TOKEN_DESCRIPTOR_FILE
#undef TOKENTOKEN_CLASS_NAME
#endif
