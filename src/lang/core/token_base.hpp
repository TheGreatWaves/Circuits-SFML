/**
 * MIT License
 *
 * Copyright (c) 2023 Ochawin A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * A token can be generated by utilizing the token generator file. (lang/core/token_generator.hpp)
 * 
 * For generating a token, two macros are essential.
 *  - TOKEN_CLASS_NAME:      The name for the generated token class.
 *  - TOKEN_DESCRIPTOR_FILE: The .def file holding the information about the tokens.
 *
 * The TOKEN_DESCRIPTOR_FILE only have three different relevant x-macros.
 *  - TOKEN(name):                  An normal token.
 *  - KEYWORD_TOKEN(name, keyword): A keyword token.
 *  - SYMBOL_TOKEN(name, symbol):   A symbol token.
 *
 * Example:
 *  - lang/hdl/token_hdl.hpp
 */

#pragma once
#ifndef TOKEN_BASE_CLASS
#define TOKEN_BASE_CLASS

#include "enum_base.hpp"

/**
 * Tokens super class.
 */
#define TOKEN_BASE(enum_class_name) \
ENUM_BASE(enum_class_name), public TokenBase<enum_class_name>

template <typename EnumT>
class TokenBase 
{
 using BaseEnumType = EnumT;
public:
 [[nodiscard]] constexpr auto is_symbol() const noexcept -> bool
 {
  return _is_symbol[get_index()];
 }

 [[nodiscard]] constexpr auto is_keyword() const noexcept -> bool
 {
  return _is_keyword[get_index()];
 }

 [[nodiscard]] constexpr auto get_symbol() const noexcept -> const std::string_view
 {
  return _symbols[get_index()];
 }

 static const BaseEnumType keyword_tokens[];
 static const BaseEnumType all_tokens[];
protected:
 // Keywords.
 static const bool _is_keyword[];

 // All string representation of symbols.
 static const std::string_view _symbols[];

 // Symbols.
 static const bool _is_symbol[];

private:
 [[nodiscard]] constexpr auto get_index() const noexcept
 {
   return static_cast<const BaseEnumType*>(this)->as_int();
 }
};

/*================================*/
/*                                */
/*          MACROS for            */
/*     Properties generation.     */
/*                                */
/*================================*/

/**
 * Defining keyword tokens.
 */
#define ALL_KEYWORD_TOKENS_DEFINITION(enum_class_name) \
template<> constexpr TokenBase<enum_class_name>::BaseEnumType TokenBase<enum_class_name>::keyword_tokens[]

/**
 * Defining all available tokens.
 */ 
#define ALL_TOKENS_DEFINITION(enum_class_name) \
template<> constexpr TokenBase<enum_class_name>::BaseEnumType TokenBase<enum_class_name>::all_tokens[]

/**
 * Used to mark all keyword tokens.
 */
#define KEYWORD_MARKER_DEFINITION(enum_class_name) \
template<> constexpr bool TokenBase<enum_class_name>::_is_keyword[]

/**
 * Used to mark all symbol tokens.
 */
#define SYMBOL_MARKER_DEFINITION(enum_class_name) \
template<> constexpr bool TokenBase<enum_class_name>::_is_symbol[]

/**
 * Used to declare all symbols (string).
 */
#define SYMBOL_STRING_DEFINITION(enum_class_name) \
template<> constexpr std::string_view TokenBase<enum_class_name>::_symbols[]

/**
 * Retrieve the value for the enum class the token class wraps.
 */
#define TOKEN_ENUM_VALUE(enum_class_name, name) \
TokenBase<enum_class_name>::BaseEnumType::name,

#endif /* TOKEN_BASE_CLASS */
