class Screen {
	static Array screen;
	static boolean color;

	function void init() {
		let screen = 16384;
		let color = false;
	}

	function void fill_screen() {
		var int i;
		let i = 0;

		while (i < 8192) {
			let screen[i] = color;
			let i = i + 1;
		}
	}

	function void clear_screen() {
		var int i;
		let i = 0;

		while (i < 8192) {
			let screen[i] = false;
			let i = i + 1;
		}
	}

	function void set_color(boolean b) {
		let color = b;
	}

	function void draw_pixel(int x, int y) {
		var int address, mask, x_chunk;

		let x_chunk = (x / 16);
		let mask = Math.two_to_the(x - (x_chunk * 16));

		let address = (32 * y) + x_chunk;


		if (color) {
			let screen[address] = screen[address] | mask;
		}
		 else {
			let screen[address] = screen[address] & (~mask);
		}
	}

	function void draw_line(int x1, int y1, int x2, int y2) {
		// Implementing Bresenham's line algorithm.

		var int dx, dy;
		var int sx, sy;
		var int err, e2;

		let dx = Math.abs(x2-x1);
		let dy = -Math.abs(y2-y1);

		let err = dx + dy;

		if (x1 < x2) {
			let sx = 1;
		} else {
			let sx = -1;
		}

		if (y1 < y2) {
			let sy = 1;
		} else {
			let sy = -1;
		}

		while (~((x1 = x2) & (y1 = y2))) {
			do Screen.draw_pixel(x1, y1);
			let e2 = err + err;
			if ((~(x1 = x2)) & (e2 > dy) | (e2 = dy)) {
				let err = err + dy;
				let x1 = x1 + sx;
			}

			if ((~(y1 = y2)) & (e2 < dx) | (e2 = dx)) {
				let err = err + dx;
				let y1 = y1 + sy;
			}
		}
		return;
	}

	function void draw_rectangle(int x1, int y1, int x2, int y2) {
		var int y;
		let y = y1;

		while (~(y = y2)) {
			do Screen.draw_line(x1, y, x2, y);
			let y = y + 1;
		}
		do Screen.draw_line(x1, y, x2, y);
	}

	function void draw_circle(int x, int y, int r) {
	}
}
